.TH "X Color Management Event API's" 3 "Mon May 11 2015" "Version 0.5.4" "Xcm" \" -*- nroff -*-
.ad l
.nh
.SH NAME
X Color Management Event API's \- 
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBXCM_ICC_COLOUR_SERVER_TARGET_PROFILE_IN_X_BASE\fP   '_ICC_DEVICE_PROFILE'"
.br
.RI "\fIX Color Management spec atoms\&. \fP"
.ti -1c
.RI "#define \fBXCM_ICC_V0_3_TARGET_PROFILE_IN_X_BASE\fP   '_ICC_PROFILE'"
.br
.RI "\fI\fIICC_PROFILE\fP(xxx) in X spec atoms \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct XcmeContext_s_ \fBXcmeContext_s\fP"
.br
.RI "\fIcontext for parsing events \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBXCME_MSG_e\fP { \fBXCME_MSG_TITLE\fP = 400, \fBXCME_MSG_COPYRIGHT\fP, \fBXCME_MSG_INFO\fP, \fBXCME_MSG_SYSTEM\fP, \fBXCME_MSG_DISPLAY_ERROR\fP, \fBXCME_MSG_DISPLAY_EVENT\fP, \fBXCME_MSG_DISPLAY_STATUS\fP }"
.br
.RI "\fIcustomisable signals for a observer \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBXcmMessage\fP (\fBXCME_MSG_e\fP code, const void *context, const char *format,\&.\&.\&.)"
.br
.RI "\fIdefault message function \fP"
.ti -1c
.RI "int \fBXcmMessageFuncSet\fP (XcmMessage_f message_func)"
.br
.RI "\fIset a message function to customise messages \fP"
.ti -1c
.RI "const char * \fBXcmePrintWindowName\fP (Display *display, Window w)"
.br
.RI "\fIreturn a short window description text \fP"
.ti -1c
.RI "void \fBXcmICCprofileGetNameFuncSet\fP (XcmICCprofileGetName_f getName)"
.br
.RI "\fIplugin more informations capabilities for ICC profiles \fP"
.ti -1c
.RI "void \fBXcmICCprofileFromMD5FuncSet\fP (XcmICCprofileGetFromMD5_f fromMD5)"
.br
.RI "\fIplugin more informations capabilities for ICC profiles \fP"
.ti -1c
.RI "const char * \fBXcmePrintWindowRegions\fP (Display *display, Window w, int always)"
.br
.RI "\fIprovide info text about window regions \fP"
.ti -1c
.RI "void \fBxcmePrintWindowRegions\fP (Display *display, Window w, int always)"
.br
.RI "\fIsend a message about window regions \fP"
.ti -1c
.RI "void \fBXcmeSelectInput\fP (\fBXcmeContext_s\fP *c)"
.br
.RI "\fIregister windows \fP"
.ti -1c
.RI "\fBXcmeContext_s\fP * \fBXcmeContext_New\fP ()"
.br
.RI "\fIallocate a event observer context structure \fP"
.ti -1c
.RI "\fBXcmeContext_s\fP * \fBXcmeContext_Create\fP (const char *display_name)"
.br
.RI "\fIallocate and initialise a event observer context structure \fP"
.ti -1c
.RI "int \fBXcmeContext_Setup2\fP (\fBXcmeContext_s\fP *c, const char *display_name, int flags)"
.br
.RI "\fIallocate and initialise a event observer context structure \fP"
.ti -1c
.RI "int \fBXcmeContext_Setup\fP (\fBXcmeContext_s\fP *c, const char *display_name)"
.br
.RI "\fIallocate and initialise a event observer context structure \fP"
.ti -1c
.RI "int \fBXcmeContext_Release\fP (\fBXcmeContext_s\fP **c)"
.br
.RI "\fIclean owned resources \fP"
.ti -1c
.RI "int \fBXcmeContext_InLoop\fP (\fBXcmeContext_s\fP *c, XEvent *event)"
.br
.RI "\fIcheck for colour management events \fP"
.ti -1c
.RI "Display * \fBXcmeContext_DisplayGet\fP (\fBXcmeContext_s\fP *c)"
.br
.RI "\fIreturn the Display \fP"
.ti -1c
.RI "int \fBXcmeContext_DisplaySet\fP (\fBXcmeContext_s\fP *c, Display *display)"
.br
.RI "\fIset a custom X11 Display \fP"
.ti -1c
.RI "int \fBXcmeContext_WindowSet\fP (\fBXcmeContext_s\fP *c, Window window)"
.br
.RI "\fIset a custom X11 Window \fP"
.in -1c
.SH "Detailed Description"
.PP 
The observer context can be allocated and setup through XcmeContext_Create\&. You can pass in a own X11 Display handle through \fBXcmeContext_New()\fP, \fBXcmeContext_DisplaySet()\fP and \fBXcmeContext_Setup()\fP\&. The events can be processed by passing all XEvents to \fBXcmeContext_InLoop()\fP from inside your X event handling loop\&. To release allocated resources call \fBXcmeContext_Release()\fP\&. For a examle look at the xcmsevents application, which is distributed along the sources\&.
.PP
XcmEvents\&.h
.PP
A small X11 colour management event observer\&.
.PP
\fBAuthor:\fP
.RS 4
Kai-Uwe Behrmann ku.b@gmx.de 
.RE
.PP
\fBLicense:\fP
.RS 4
MIT http://www.opensource.org/licenses/mit-license.php 
.RE
.PP
\fBCopyright:\fP
.RS 4
2009-2013 - Kai-Uwe Behrmann ku.b@gmx.de 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define XCM_ICC_COLOUR_SERVER_TARGET_PROFILE_IN_X_BASE   '_ICC_DEVICE_PROFILE'"

.PP
X Color Management spec atoms\&. 
.PP
Referenced by XcmeContext_InLoop()\&.
.SS "#define XCM_ICC_V0_3_TARGET_PROFILE_IN_X_BASE   '_ICC_PROFILE'"

.PP
\fIICC_PROFILE\fP(xxx) in X spec atoms 
.PP
Referenced by XcmeContext_InLoop()\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct XcmeContext_s_ \fBXcmeContext_s\fP"

.PP
context for parsing events 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBXCME_MSG_e\fP"

.PP
customisable signals for a observer 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIXCME_MSG_TITLE \fP\fP
basic library title 
.TP
\fB\fIXCME_MSG_COPYRIGHT \fP\fP
Copyright infos\&. 
.TP
\fB\fIXCME_MSG_INFO \fP\fP
normaly ignored 
.TP
\fB\fIXCME_MSG_SYSTEM \fP\fP
forwarded system message 
.TP
\fB\fIXCME_MSG_DISPLAY_ERROR \fP\fP
errors during run 
.TP
\fB\fIXCME_MSG_DISPLAY_EVENT \fP\fP
event smessage 
.TP
\fB\fIXCME_MSG_DISPLAY_STATUS \fP\fP
initial status infos 
.SH "Function Documentation"
.PP 
.SS "\fBXcmeContext_s\fP * XcmeContext_Create (const char *display_name)"

.PP
allocate and initialise a event observer context structure Function XcmeContext_Create The context is needed to observe colour management events\&.
.PP
\fBParameters:\fP
.RS 4
\fIdisplay_name\fP a valid X11 display name 
.RE
.PP
\fBReturns:\fP
.RS 4
the context
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2009/00/00 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.PP
References XcmeContext_New(), and XcmeContext_Setup()\&.
.SS "Display * XcmeContext_DisplayGet (\fBXcmeContext_s\fP *c)"

.PP
return the Display Function XcmeContext_DisplayGet 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP a event observer context 
.RE
.PP
\fBReturns:\fP
.RS 4
the X11 display
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2010/10/01 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.SS "int XcmeContext_DisplaySet (\fBXcmeContext_s\fP *c, Display *display)"

.PP
set a custom X11 Display Function XcmeContext_DisplaySet 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP a event observer context 
.br
\fIdisplay\fP the custom X11 display 
.RE
.PP
\fBReturns:\fP
.RS 4
error
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2010/10/01 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.SS "int XcmeContext_InLoop (\fBXcmeContext_s\fP *c, XEvent *event)"

.PP
check for colour management events Function XcmeContext_InLoop This function needs to be called inside the X11 event loop, to observe the related events and send messages about them\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP a event observer context 
.br
\fIevent\fP a X event handle 
.RE
.PP
\fBReturns:\fP
.RS 4
- 0: success
.IP "\(bu" 2
-1: nothing to do
.IP "\(bu" 2
1: error
.PP
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2009/00/00 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.PP
References XCM_ICC_COLOUR_SERVER_TARGET_PROFILE_IN_X_BASE, XCM_ICC_V0_3_TARGET_PROFILE_IN_X_BASE, XcmePrintWindowName(), xcmePrintWindowRegions(), and XcmeSelectInput()\&.
.SS "\fBXcmeContext_s\fP * XcmeContext_New ()"

.PP
allocate a event observer context structure Function XcmeContext_New The context is needed to observe colour management events\&. After the allocation the context needs initialisation\&.
.PP
\fBReturns:\fP
.RS 4
the context
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2009/00/00 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.PP
Referenced by XcmeContext_Create()\&.
.SS "int XcmeContext_Release (\fBXcmeContext_s\fP **c)"

.PP
clean owned resources Function XcmeContext_Release 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP a event observer context
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2009/00/00 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.SS "int XcmeContext_Setup (\fBXcmeContext_s\fP *c, const char *display_name)"

.PP
allocate and initialise a event observer context structure Function XcmeContext_Setup The initialised context is needed for observing colour management events\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP a event observer context A existing X11 display will be honoured\&. 
.br
\fIdisplay_name\fP a valid X11 display name or NULL; With a existing X11 display inside c, this option will be ignored\&.
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.4\&.1 
.RE
.PP
\fBSince:\fP
.RS 4
2009/00/00 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2011/05/06 
.RE
.PP

.PP
References XCM_COLOR_DESKTOP, XCM_COLOR_OUTPUTS, XCM_COLOR_PROFILES, XCM_COLOR_REGIONS, XCME_MSG_COPYRIGHT, XCME_MSG_TITLE, XcmeContext_Setup2(), and xcmePrintWindowRegions()\&.
.PP
Referenced by XcmeContext_Create()\&.
.SS "int XcmeContext_Setup2 (\fBXcmeContext_s\fP *c, const char *display_name, intflags)"

.PP
allocate and initialise a event observer context structure Function XcmeContext_Setup2 The initialised context is needed for observing colour management events\&. No initial events are sent\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP a event observer context A existing X11 display will be honoured\&. 
.br
\fIdisplay_name\fP a valid X11 display name or NULL; With a existing X11 display inside c, this option will be ignored\&. 
.br
\fIflags\fP unused
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.5\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2011/10/26 (libXcm: 0\&.5\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2011/10/26 
.RE
.PP

.PP
References XCM_COLOR_DESKTOP, XCM_COLOR_OUTPUTS, XCM_COLOR_PROFILES, XCM_COLOR_REGIONS, and XcmeSelectInput()\&.
.PP
Referenced by XcmeContext_Setup()\&.
.SS "int XcmeContext_WindowSet (\fBXcmeContext_s\fP *c, Windowwindow)"

.PP
set a custom X11 Window Function xcmeContext_WindowSet 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP a event observer context 
.br
\fIwindow\fP the custom X11 window 
.RE
.PP
\fBReturns:\fP
.RS 4
error
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2010/10/01 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.SS "const char * XcmePrintWindowName (Display *display, Windoww)"

.PP
return a short window description text 
.PP
Referenced by XcmeContext_InLoop(), XcmePrintWindowRegions(), and xcmePrintWindowRegions()\&.
.SS "const char * XcmePrintWindowRegions (Display *display, Windoww, intalways)"

.PP
provide info text about window regions Function XcmePrintWindowRegions The function informs about _ICC_COLOR_REGIONS atom\&.
.PP
\fBParameters:\fP
.RS 4
\fIdisplay\fP X display 
.br
\fIw\fP X window 
.br
\fIalways\fP send always a message, even for a empty property
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.4\&.3 
.RE
.PP
\fBSince:\fP
.RS 4
2009/00/00 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2011/10/01 
.RE
.PP

.PP
References XCM_COLOR_REGIONS, XcmePrintWindowName(), and XcolorRegionFetch()\&.
.SS "void xcmePrintWindowRegions (Display *display, Windoww, intalways)"

.PP
send a message about window regions Function xcmePrintWindowRegions The function informs about _ICC_COLOR_REGIONS atom\&.
.PP
\fBParameters:\fP
.RS 4
\fIdisplay\fP X display 
.br
\fIw\fP X window 
.br
\fIalways\fP send always a message, even for a empty property
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2009/00/00 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.PP
References XCM_COLOR_REGIONS, XcmePrintWindowName(), and XcolorRegionFetch()\&.
.PP
Referenced by XcmeContext_InLoop(), and XcmeContext_Setup()\&.
.SS "void XcmeSelectInput (\fBXcmeContext_s\fP *c)"

.PP
register windows Function XcmeSelectInput 
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.5\&.3 
.RE
.PP
\fBDate:\fP
.RS 4
2013/01/13 
.RE
.PP
\fBSince:\fP
.RS 4
2013/01/13 (libXcm: 0\&.5\&.3) 
.RE
.PP

.PP
Referenced by XcmeContext_InLoop(), and XcmeContext_Setup2()\&.
.SS "void XcmICCprofileFromMD5FuncSet (XcmICCprofileGetFromMD5_ffromMD5)"

.PP
plugin more informations capabilities for ICC profiles Function XcmICCprofileFromMD5FuncSet 
.PP
\fBParameters:\fP
.RS 4
\fIfromMD5\fP a function to resolve a ICC profile in ICC profile paths from a md5 hash sum
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2010/10/01 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/02 
.RE
.PP

.SS "void XcmICCprofileGetNameFuncSet (XcmICCprofileGetName_fgetName)"

.PP
plugin more informations capabilities for ICC profiles Function XcmICCprofileGetNameFuncSet 
.PP
\fBParameters:\fP
.RS 4
\fIgetName\fP get internal and external profile name
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2010/10/01 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/02 
.RE
.PP

.SS "int XcmMessage (\fBXCME_MSG_e\fPcode, const void *context, const char *format, \&.\&.\&.)"

.PP
default message function Function XcmMessage Messages are printed out to stdout console text stream\&.
.PP
\fBReturns:\fP
.RS 4
- 0: fine
.IP "\(bu" 2
1: error
.PP
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2008/04/03 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.PP
References XCME_MSG_COPYRIGHT, XCME_MSG_DISPLAY_ERROR, XCME_MSG_DISPLAY_EVENT, XCME_MSG_DISPLAY_STATUS, XCME_MSG_INFO, XCME_MSG_SYSTEM, and XCME_MSG_TITLE\&.
.SS "int XcmMessageFuncSet (XcmMessage_fmessage_func)"

.PP
set a message function to customise messages 
.SH "Author"
.PP 
Generated automatically by Doxygen for Xcm from the source code\&.
