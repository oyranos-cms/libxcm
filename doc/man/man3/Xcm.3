.TH "X Color Management Core API's" 3 "Tue May 26 2015" "Version 0.5.4" "Xcm-0.5.4" \" -*- nroff -*-
.ad l
.nh
.SH NAME
X Color Management Core API's \- 
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBXcolorProfile\fP"
.br
.ti -1c
.RI "struct \fBXcolorRegion\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBXCM_COLOR_PROFILES\fP   '_ICC_COLOR_PROFILES'"
.br
.ti -1c
.RI "#define \fBXCM_COLOR_REGIONS\fP   '_ICC_COLOR_REGIONS'"
.br
.ti -1c
.RI "#define \fBXCM_COLOR_OUTPUTS\fP   '_ICC_COLOR_OUTPUTS'"
.br
.ti -1c
.RI "#define \fBXCM_COLOR_DESKTOP\fP   '_ICC_COLOR_DESKTOP'"
.br
.ti -1c
.RI "#define \fBXCM_DEVICE_PROFILE\fP   '_ICC_DEVICE_PROFILE'"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBXCM_COLOR_SERVER_REGIONS\fP = 0x01, \fBXCM_COLOR_SERVER_PROFILES\fP = 0x02, \fBXCM_COLOR_SERVER_DISPLAY_ADVANCED\fP = 0x04, \fBXCM_COLOR_SERVER_OUTPUTS\fP = 0x08, \fBXCM_COLOR_SERVER_MANAGEMENT\fP = 0x10 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBXcolorProfileUpload\fP (Display *dpy, \fBXcolorProfile\fP *profile)"
.br
.RI "\fIUploads the profile into all screens of the display\&. \fP"
.ti -1c
.RI "int \fBXcolorProfileDelete\fP (Display *dpy, \fBXcolorProfile\fP *profile)"
.br
.RI "\fIDecreases the ref-count of the profile\&. \fP"
.ti -1c
.RI "int \fBXcolorRegionInsert\fP (Display *dpy, Window win, unsigned long pos, \fBXcolorRegion\fP *region, unsigned long nRegions)"
.br
.RI "\fIInserts the supplied regions into the stack\&. \fP"
.ti -1c
.RI "\fBXcolorRegion\fP * \fBXcolorRegionFetch\fP (Display *dpy, Window win, unsigned long *nRegions)"
.br
.RI "\fIFetches the existing regions\&. \fP"
.ti -1c
.RI "int \fBXcolorRegionDelete\fP (Display *dpy, Window win, unsigned long start, unsigned long count)"
.br
.RI "\fIDeletes regions\&. \fP"
.ti -1c
.RI "int \fBXcolorRegionActivate\fP (Display *dpy, Window win, unsigned long start, unsigned long count)"
.br
.RI "\fIActivates regions\&. \fP"
.ti -1c
.RI "int \fBXcmColorServerCapabilities\fP (Display *dpy)"
.br
.RI "\fIinforms which colour server services are available \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define XCM_COLOR_DESKTOP   '_ICC_COLOR_DESKTOP'"
The XCM_COLOR_DESKTOP macro The atom is attached on the root window to tell about a color servers activity\&. The content is of type XA_STRING and has four sections separated by a empty space char ' '\&. The _ICC_COLOR_DESKTOP atom is a string with following usages:
.IP "\(bu" 2
uniquely identify the colour server
.IP "\(bu" 2
tell the name of the colour server
.IP "\(bu" 2
tell the colour server is alive All sections are separated by one space char ' ' for easy parsing\&.
.PP
.PP
The first section contains the process id (pid_t) of the color server process, which has set the atom\&. The second section contains time since epoch GMT as returned by time(NULL)\&. The thired section contains the bar '|' separated and surrounded capabilities:
.IP "\(bu" 2
ICP _ICC_COLOR_PROFILES - support per region profiles
.IP "\(bu" 2
ICM _ICC_COLOR_MANAGEMENT - color server is active
.IP "\(bu" 2
ICO _ICC_COLOR_OUTPUTS - support per window and output configuration
.IP "\(bu" 2
ICR _ICC_COLOR_REGIONS - support regions
.IP "\(bu" 2
ICA _ICC_COLOR_DISPLAY_ADVANCED - use CMS advanced settings, e\&.g\&. proofing
.IP "\(bu" 2
V0\&.3 indicates version compliance to the _ICC_Profile in X spec The fourth section contains the servers name identifier\&.
.PP
.PP
As of this specification the third section must contain ICR and the supported _ICC_PROFILE in X version\&.
.PP
A example of a valid atom might look like: _ICC_COLOR_DESKTOP(STRING) = '4518 1274001512 |ICR|ICM|V0\&.3| compiz_colour_desktop' 
.PP
Referenced by XcmColorServerCapabilities(), XcmeContext_Setup(), and XcmeContext_Setup2()\&.
.SS "#define XCM_COLOR_OUTPUTS   '_ICC_COLOR_OUTPUTS'"
The XCM_COLOR_OUTPUTS macro is attached to windows and specifies on which output the window should look correctly\&. The type is XA_STRING\&. 
.PP
Referenced by XcmeContext_Setup(), and XcmeContext_Setup2()\&.
.SS "#define XCM_COLOR_PROFILES   '_ICC_COLOR_PROFILES'"
The XCM_COLOR_PROFILES macro represents a atom name for under which \fBXcolorProfile\fP data can be stored\&. 
.PP
Referenced by XcmeContext_Setup(), XcmeContext_Setup2(), XcolorProfileDelete(), and XcolorProfileUpload()\&.
.SS "#define XCM_COLOR_REGIONS   '_ICC_COLOR_REGIONS'"
The XCM_COLOR_REGIONS macro represents a atom name for under which XcolorRegions data can be stored\&. 
.PP
Referenced by XcmeContext_Setup(), XcmeContext_Setup2(), XcmePrintWindowRegions(), xcmePrintWindowRegions(), XcolorRegionDelete(), XcolorRegionFetch(), and XcolorRegionInsert()\&.
.SS "#define XCM_DEVICE_PROFILE   '_ICC_DEVICE_PROFILE'"
The _ICC_DEVICE_PROFILE atom The atom will hold a native ICC profile with the exposed device characteristics at the compositing window manager level\&. The colour server shall if no _ICC_DEVICE_PROFILE(_xxx) is set, copy the _ICC_PROFILE(_xxx) profiles to each equivalent _ICC_DEVICE_PROFILE(_xxx) atom\&. The _ICC_PROFILE(_xxx) profiles shall be replaced by a sRGB ICC profile\&. The counting in the atoms (_xxx) name section follows the rules outlined in the ICC Profile in X recommendation\&. After finishing the session the the old state has to be recovered by copying any _ICC_DEVICE_PROFILE(_xxx) atoms content into the appropriate _ICC_PROFILE(_xxx) atoms and removing all _ICC_DEVICE_PROFILE(_xxx) atoms\&. The colour server must be aware about change property events indicating that a _ICC_PROFILE(_xxx) atom has changed by a external application and needs to move that profile to the appropriate _ICC_DEVICE_PROFILE(_xxx) atom and set the _ICC_PROFILE(_xxx) atom to sRGB as well\&. The modification of the _ICC_DEVICE_PROFILE(_xxx) atoms by external applications is undefined\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"
The XCM_COLOR_SERVER_ enums describe colour server capabilities as specified in XCM_COLOR_DESKTOP atom\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIXCM_COLOR_SERVER_REGIONS \fP\fP
_ICC_COLOR_REGIONS 
.TP
\fB\fIXCM_COLOR_SERVER_PROFILES \fP\fP
_ICC_COLOR_PROFILES 
.TP
\fB\fIXCM_COLOR_SERVER_DISPLAY_ADVANCED \fP\fP
_ICC_COLOR_DISPLAY_ADVANCED 
.TP
\fB\fIXCM_COLOR_SERVER_OUTPUTS \fP\fP
_ICC_COLOR_OUTPUTS 
.TP
\fB\fIXCM_COLOR_SERVER_MANAGEMENT \fP\fP
_ICC_COLOR_MANAGEMENT 
.SH "Function Documentation"
.PP 
.SS "int XcmColorServerCapabilities (Display *dpy)"

.PP
informs which colour server services are available Function XcmColorServerCapabilities Query the capabilities of a colour server\&. In case no colour server is running, the function should return zero\&. The return value consists of a bit mask of XCM_COLOR_SERVER_ properties from the XCM_COLOR_DESKTOP atom\&. 
.PP
References XCM_COLOR_DESKTOP, XCM_COLOR_SERVER_DISPLAY_ADVANCED, XCM_COLOR_SERVER_MANAGEMENT, XCM_COLOR_SERVER_PROFILES, and XCM_COLOR_SERVER_REGIONS\&.
.SS "int XcolorProfileDelete (Display *dpy, \fBXcolorProfile\fP *profile)"

.PP
Decreases the ref-count of the profile\&. Function XcolorProfileDelete You shouldn't use the profile anymore after this call because it could have been removed from the internal database in the compositing manager\&. If you do, nothing bad will happen, just that color management won't work on regions that use this profile\&. 
.PP
References XcolorProfile::length, and XCM_COLOR_PROFILES\&.
.SS "int XcolorProfileUpload (Display *dpy, \fBXcolorProfile\fP *profile)"

.PP
Uploads the profile into all screens of the display\&. Function XcolorProfileUpload Uploads the profile into all screens of the display\&. Profiles are ref-counted inside the compositing manager, so make sure to call \fBXcolorProfileDelete()\fP before your application exits or when you don't need the profile anymore\&. 
.PP
References XcolorProfile::length, and XCM_COLOR_PROFILES\&.
.SS "int XcolorRegionActivate (Display *dpy, Windowwin, unsigned longstart, unsigned longcount)"

.PP
Activates regions\&. Function XcolorRegionActivate Activates 'count' regions starting at positiong 'start' in the stack\&. Unlike the other functions it does not check whether 'start + count' extends beyond the stack end\&. To disable all regions pass zero to 'count'\&. 
.SS "int XcolorRegionDelete (Display *dpy, Windowwin, unsigned longstart, unsigned longcount)"

.PP
Deletes regions\&. Function XcolorRegionDelete Deletes 'count' regions starting at 'start' in the stack\&. If 'start + count' in beyond the stack end, nothing will be done and the function returns '-1'\&. 
.PP
References XCM_COLOR_REGIONS, and XcolorRegionFetch()\&.
.SS "\fBXcolorRegion\fP* XcolorRegionFetch (Display *dpy, Windowwin, unsigned long *nRegions)"

.PP
Fetches the existing regions\&. Function XcolorRegionFetch Fetches the existing regions and returns an array of '\fBXcolorRegion\fP'\&. After you're done, free the array using XFree()\&. The number of regions is put into 'nRegions'\&. 
.PP
References XCM_COLOR_REGIONS\&.
.PP
Referenced by XcmePrintWindowRegions(), xcmePrintWindowRegions(), XcolorRegionDelete(), and XcolorRegionInsert()\&.
.SS "int XcolorRegionInsert (Display *dpy, Windowwin, unsigned longpos, \fBXcolorRegion\fP *region, unsigned longnRegions)"

.PP
Inserts the supplied regions into the stack\&. Function XcolorRegionInsert Inserts the supplied regions into the stack at the position 'pos', shifting the existing profiles upwards in the stack\&. If 'pos' is beyond the stack end, nothing will be done and the function returns '-1'\&. 
.PP
References XCM_COLOR_REGIONS, and XcolorRegionFetch()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Xcm-0\&.5\&.4 from the source code\&.
