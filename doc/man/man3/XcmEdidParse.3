.TH "X Color Management EDID data block parsing API's" 3 "Mon May 11 2015" "Version 0.5.4" "Xcm" \" -*- nroff -*-
.ad l
.nh
.SH NAME
X Color Management EDID data block parsing API's \- 
.PP
EDID data block parsing\&.  

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBXCM_EDID_KEY_VENDOR\fP   'vendor'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_MODEL\fP   'model'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_SERIAL\fP   'serial'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_REDx\fP   'red_x'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_REDy\fP   'red_y'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_GREENx\fP   'green_x'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_GREENy\fP   'green_y'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_BLUEx\fP   'blue_x'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_BLUEy\fP   'blue_y'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_WHITEx\fP   'white_x'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_WHITEy\fP   'white_y'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_GAMMA\fP   'gamma'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_WEEK\fP   'week'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_YEAR\fP   'year'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_MNFT_ID\fP   'mnft_id'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_MODEL_ID\fP   'model_id'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_MNFT\fP   'mnft'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_MANUFACTURER\fP   'manufacturer'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_A3RED\fP   'a3red'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_A2RED\fP   'a2red'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_A3GREEN\fP   'a3green'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_A2GREEN\fP   'a2green'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_A3BLUE\fP   'a3blue'"
.br
.ti -1c
.RI "#define \fBXCM_EDID_KEY_A2BLUE\fP   'a2blue'"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "XCM_EDID_ERROR_e \fBXcmEdidParse\fP (void *edid, XcmEdidKeyValue_s **list, int *count)"
.br
.RI "\fIEDID to key/value pair transformation\&. \fP"
.ti -1c
.RI "XCM_EDID_ERROR_e \fBXcmEdidFree\fP (XcmEdidKeyValue_s **list)"
.br
.RI "\fIfree library allocated list \fP"
.ti -1c
.RI "const char * \fBXcmEdidErrorToString\fP (XCM_EDID_ERROR_e error)"
.br
.RI "\fIconvert enum into a meaningful text string \fP"
.ti -1c
.RI "XCM_EDID_ERROR_e \fBXcmEdidPrintString\fP (void *edid, char **text, void *(*alloc)(size_t sz))"
.br
.RI "\fIconvert a EDID block into text \fP"
.ti -1c
.RI "XCM_EDID_ERROR_e \fBXcmEdidPrintOpenIccJSON\fP (void *edid, char **text, void *(*alloc)(size_t sz))"
.br
.RI "\fIconvert a EDID block into a device configuration \fP"
.in -1c
.SH "Detailed Description"
.PP 
EDID data block parsing\&. 

The purpouse of this API is to obtain basic and displayable device identification strings and colorimetric informations contained in the EDID data block sent by monitors\&.
.PP
The user has to pass in a valid EDID block\&. This can be obtained per a root window X atom or a XRandR output property and is not part of this API\&. The data block is passed to \fBXcmEdidParse()\fP\&. This function generates a list of key value pairs, with some first rough interpretation\&. The key/values are useable for data bases, ICC profile generation or device identification\&. The returned XcmEdidKeyValue_s list elements can be individually read and worked with\&. Please look as well on the \fBXcmEdidPrintString()\fP function and examples/edid-parse/ as a small example on how to use the API\&. The \fBXcmEdidPrintOpenIccJSON()\fP will pull out a JSON data structure\&. \fBXcmEdidFree()\fP releases allocated list memory\&.
.PP
XcmEdidParse\&.h
.PP
Xcm Xorg Colour Management
.PP
\fBCopyright:\fP
.RS 4
2005-2011 (C) Kai-Uwe Behrmann 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define XCM_EDID_KEY_A2BLUE   'a2blue'"
transfer value for blue component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_A2GREEN   'a2green'"
transfer value for green component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_A2RED   'a2red'"
transfer value for red component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_A3BLUE   'a3blue'"
transfer value for blue component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_A3GREEN   'a3green'"
transfer value for green component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_A3RED   'a3red'"
transfer value for red component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_BLUEx   'blue_x'"
colorimetric primary blue CIE*xyY x component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_BLUEy   'blue_y'"
colorimetric primary blue CIE*xyY y component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_GAMMA   'gamma'"
colorimetric single gamma for all channels, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_GREENx   'green_x'"
colorimetric primary green CIE*xyY x component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_GREENy   'green_y'"
colorimetric primary green CIE*xyY y component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_MANUFACTURER   'manufacturer'"
full length manufacturer, string 
.SS "#define XCM_EDID_KEY_MNFT   'mnft'"
manufacturer ID, string 
.SS "#define XCM_EDID_KEY_MNFT_ID   'mnft_id'"
manufacturer ID, integer 
.SS "#define XCM_EDID_KEY_MODEL   'model'"
full length device model, string 
.SS "#define XCM_EDID_KEY_MODEL_ID   'model_id'"
model ID, integer 
.SS "#define XCM_EDID_KEY_REDx   'red_x'"
colorimetric primary red CIE*xyY x component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_REDy   'red_y'"
colorimetric primary red CIE*xyY y component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_SERIAL   'serial'"
full length device serial number, string 
.SS "#define XCM_EDID_KEY_VENDOR   'vendor'"
full length vendor, string 
.SS "#define XCM_EDID_KEY_WEEK   'week'"
manufactur week, integer 
.SS "#define XCM_EDID_KEY_WHITEx   'white_x'"
colorimetric primary white CIE*xyY x component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_WHITEy   'white_y'"
colorimetric primary white CIE*xyY y component, double 
.PP
Referenced by XcmEdidParse()\&.
.SS "#define XCM_EDID_KEY_YEAR   'year'"
manufactur year, integer 
.SH "Function Documentation"
.PP 
.SS "const char * XcmEdidErrorToString (XCM_EDID_ERROR_eerror)"

.PP
convert enum into a meaningful text string Function XcmEdidErrorToString 
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP the error 
.RE
.PP
\fBReturns:\fP
.RS 4
library owned error text string
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2009/12/12 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.SS "XCM_EDID_ERROR_e XcmEdidFree (XcmEdidKeyValue_s **list)"

.PP
free library allocated list Function XcmEdidFree 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP the key/value data structures 
.RE
.PP
\fBReturns:\fP
.RS 4
error code
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2009/12/12 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.PP
Referenced by XcmEdidPrintOpenIccJSON(), and XcmEdidPrintString()\&.
.SS "XCM_EDID_ERROR_e XcmEdidParse (void *edid, XcmEdidKeyValue_s **list, int *count)"

.PP
EDID to key/value pair transformation\&. Function XcmEdidParse The function performs no verification of the data block other than the first eight byte block signature\&.
.PP
\fBParameters:\fP
.RS 4
\fIedid\fP EDID data block 128 or 256 bytes long 
.br
\fIlist\fP the key/value data structures 
.br
\fIcount\fP pass in a pointer to a int\&. gives the number of elements in list 
.RE
.PP
\fBReturns:\fP
.RS 4
error code
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2009/12/12 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.PP
References XCM_EDID_KEY_A2BLUE, XCM_EDID_KEY_A2GREEN, XCM_EDID_KEY_A2RED, XCM_EDID_KEY_A3BLUE, XCM_EDID_KEY_A3GREEN, XCM_EDID_KEY_A3RED, XCM_EDID_KEY_BLUEx, XCM_EDID_KEY_BLUEy, XCM_EDID_KEY_GAMMA, XCM_EDID_KEY_GREENx, XCM_EDID_KEY_GREENy, XCM_EDID_KEY_REDx, XCM_EDID_KEY_REDy, XCM_EDID_KEY_WHITEx, and XCM_EDID_KEY_WHITEy\&.
.PP
Referenced by XcmEdidPrintOpenIccJSON(), and XcmEdidPrintString()\&.
.SS "XCM_EDID_ERROR_e XcmEdidPrintOpenIccJSON (void *edid, char **text, void *(*)(size_t sz)alloc)"

.PP
convert a EDID block into a device configuration Function XcmEdidPrintOpenIccJSON 
.PP
\fBParameters:\fP
.RS 4
\fIedid\fP the EDID data block 
.br
\fItext\fP the resulting text string 
.br
\fIalloc\fP a user provided function to allocate text 
.RE
.PP
\fBReturns:\fP
.RS 4
error code
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.4\&.2 
.RE
.PP
\fBSince:\fP
.RS 4
2011/06/19 (libXcm: 0\&.4\&.2) 
.RE
.PP
\fBDate:\fP
.RS 4
2011/06/19 
.RE
.PP

.PP
References XcmEdidFree(), and XcmEdidParse()\&.
.SS "XCM_EDID_ERROR_e XcmEdidPrintString (void *edid, char **text, void *(*)(size_t sz)alloc)"

.PP
convert a EDID block into text Function XcmEdidPrintString 
.PP
\fBParameters:\fP
.RS 4
\fIedid\fP the EDID data block 
.br
\fItext\fP the resulting text string 
.br
\fIalloc\fP a user provided function to allocate text 
.RE
.PP
\fBReturns:\fP
.RS 4
error code
.RE
.PP
\fBVersion:\fP
.RS 4
libXcm: 0\&.3\&.0 
.RE
.PP
\fBSince:\fP
.RS 4
2009/12/12 (libXcm: 0\&.3\&.0) 
.RE
.PP
\fBDate:\fP
.RS 4
2010/10/01 
.RE
.PP

.PP
References XcmEdidFree(), and XcmEdidParse()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Xcm from the source code\&.
